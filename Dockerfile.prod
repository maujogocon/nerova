# Dockerfile para Next.js - Despliegue Estático con Nginx
# Genera archivos estáticos y los sirve con Nginx

# Etapa 1: Dependencias
FROM node:18-alpine AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copiar archivos de dependencias
COPY package.json package-lock.json* ./
RUN npm ci --only=production && npm cache clean --force

# Etapa 2: Builder - Genera archivos estáticos
FROM node:18-alpine AS builder
WORKDIR /app

# Copiar dependencias desde la etapa anterior
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Instalar todas las dependencias (incluyendo devDependencies)
RUN npm ci

# Configurar variables de entorno para build
ENV NEXT_TELEMETRY_DISABLED 1
ENV NODE_ENV production

# Ejecutar build y exportación estática de Next.js
RUN npm run build

# Etapa 3: Servidor web estático con Nginx
FROM nginx:alpine AS runner

# Copiar configuración personalizada de Nginx
COPY --from=builder /app/nginx.conf /etc/nginx/conf.d/default.conf

# Copiar archivos estáticos generados
COPY --from=builder /app/out /usr/share/nginx/html

# Exponer puerto 80
EXPOSE 80

# Nginx se ejecuta automáticamente
CMD ["nginx", "-g", "daemon off;"]

# docker build -t nerova -f Dockerfile.prod .
# docker run -d -p 80:80 --name nerova-app nerova